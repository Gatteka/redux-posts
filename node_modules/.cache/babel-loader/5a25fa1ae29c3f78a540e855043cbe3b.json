{"ast":null,"code":"import { connect } from 'react-redux';\nimport { deletePost, createPost, showForm, showUpdateForm, updatePost, showPostDetail } from '../../actions';\nimport Button from '../../components/Buttons/Button';\nimport { put, takeEvery } from 'redux-saga/effects';\nimport action from '../../index';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    classes: ownProps.classes,\n    result: getButtonText(state, ownProps.data)\n  };\n}\n\nfunction getButtonText(state, data) {\n  if (!data.showElement) {\n    return data.buttonText;\n  }\n\n  let formState = state.form.filter(v => v.showElement === data.showElement).pop();\n\n  if (!formState) {\n    return data.buttonText;\n  }\n\n  return formState.enabled ? \"Hide Form\" : \"Show Form\";\n}\n/**\n * generator function for middleware\n */\n\n\nfunction* hide() {\n  yield put(showForm('form-element-1'));\n}\n\nexport function* doubleAction() {\n  yield takeEvery('CREATE_POST', hide);\n}\n/** mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well. */\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  console.log(ownProps);\n  return {\n    \"onClick\": function () {\n      let action = ownProps.action;\n\n      switch (action) {\n        case 'showForm':\n          return dispatch(showForm(ownProps.data.showElement));\n\n        case 'createPost':\n          return dispatch(createPost(ownProps.data.title, ownProps.data.text));\n\n        case 'deletePost':\n          return dispatch(deletePost(ownProps.data));\n\n        case 'updatePost':\n          return dispatch(updatePost(ownProps.data));\n\n        case 'showUpdateForm':\n          return dispatch(showUpdateForm(ownProps.data));\n\n        case 'showPostDetail':\n          return dispatch(showPostDetail(ownProps.data));\n      }\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","map":{"version":3,"sources":["/var/www/reactapps/testing-app-refactoring/src/containers/Buttons/Button.js"],"names":["connect","deletePost","createPost","showForm","showUpdateForm","updatePost","showPostDetail","Button","put","takeEvery","action","mapStateToProps","state","ownProps","classes","result","getButtonText","data","showElement","buttonText","formState","form","filter","v","pop","enabled","hide","doubleAction","mapDispatchToProps","dispatch","console","log","title","text"],"mappings":"AAAA,SAAQA,OAAR,QAAuB,aAAvB;AACA,SACIC,UADJ,EAEIC,UAFJ,EAGIC,QAHJ,EAIIC,cAJJ,EAKIC,UALJ,EAMIC,cANJ,QAOO,eAPP;AAQA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,SAAQC,GAAR,EAAaC,SAAb,QAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAED,QAAQ,CAACC,OADf;AAEHC,IAAAA,MAAM,EAAEC,aAAa,CAACJ,KAAD,EAAQC,QAAQ,CAACI,IAAjB;AAFlB,GAAP;AAIH;;AAED,SAASD,aAAT,CAAuBJ,KAAvB,EAA8BK,IAA9B,EAAoC;AAChC,MAAI,CAACA,IAAI,CAACC,WAAV,EAAuB;AACnB,WAAOD,IAAI,CAACE,UAAZ;AACH;;AACD,MAAIC,SAAS,GAAGR,KAAK,CAACS,IAAN,CAAWC,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACL,WAAF,KAAkBD,IAAI,CAACC,WAA9C,EAA2DM,GAA3D,EAAhB;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACZ,WAAOH,IAAI,CAACE,UAAZ;AACH;;AACD,SAAOC,SAAS,CAACK,OAAV,GAAoB,WAApB,GAAkC,WAAzC;AACH;AAED;;;;;AAGA,UAAUC,IAAV,GAAiB;AACb,QAAMlB,GAAG,CAACL,QAAQ,CAAC,gBAAD,CAAT,CAAT;AACH;;AAED,OAAO,UAAUwB,YAAV,GAAyB;AAC5B,QAAMlB,SAAS,CAAC,aAAD,EAAgBiB,IAAhB,CAAf;AACH;AAED;;;AAEA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsChB,QAAtC,EAAgD;AAC5CiB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AAEA,SAAO;AACH,eAAW,YAAY;AACnB,UAAIH,MAAM,GAAGG,QAAQ,CAACH,MAAtB;;AACA,cAAQA,MAAR;AACI,aAAK,UAAL;AACI,iBAAOmB,QAAQ,CAAC1B,QAAQ,CAACU,QAAQ,CAACI,IAAT,CAAcC,WAAf,CAAT,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOW,QAAQ,CAAC3B,UAAU,CAACW,QAAQ,CAACI,IAAT,CAAce,KAAf,EAAsBnB,QAAQ,CAACI,IAAT,CAAcgB,IAApC,CAAX,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOJ,QAAQ,CAAC5B,UAAU,CAACY,QAAQ,CAACI,IAAV,CAAX,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOY,QAAQ,CAACxB,UAAU,CAACQ,QAAQ,CAACI,IAAV,CAAX,CAAf;;AACJ,aAAK,gBAAL;AACI,iBAAOY,QAAQ,CAACzB,cAAc,CAACS,QAAQ,CAACI,IAAV,CAAf,CAAf;;AACJ,aAAK,gBAAL;AACI,iBAAOY,QAAQ,CAACvB,cAAc,CAACO,QAAQ,CAACI,IAAV,CAAf,CAAf;AAZR;AAcH;AAjBE,GAAP;AAmBH;;AAGD,eAAejB,OAAO,CAClBW,eADkB,EAElBiB,kBAFkB,CAAP,CAGbrB,MAHa,CAAf","sourcesContent":["import {connect,} from 'react-redux'\nimport {\n    deletePost,\n    createPost,\n    showForm,\n    showUpdateForm,\n    updatePost,\n    showPostDetail\n} from '../../actions'\nimport Button from '../../components/Buttons/Button'\nimport {put, takeEvery} from 'redux-saga/effects'\nimport action from '../../index'\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        classes: ownProps.classes,\n        result: getButtonText(state, ownProps.data),\n    }\n}\n\nfunction getButtonText(state, data) {\n    if (!data.showElement) {\n        return data.buttonText\n    }\n    let formState = state.form.filter(v => v.showElement === data.showElement).pop();\n    if (!formState) {\n        return data.buttonText\n    }\n    return formState.enabled ? \"Hide Form\" : \"Show Form\"\n}\n\n/**\n * generator function for middleware\n */\nfunction* hide() {\n    yield put(showForm('form-element-1'))\n}\n\nexport function* doubleAction() {\n    yield takeEvery('CREATE_POST', hide)\n}\n\n/** mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well. */\nfunction mapDispatchToProps(dispatch, ownProps) {\n    console.log(ownProps);\n\n    return {\n        \"onClick\": function () {\n            let action = ownProps.action;\n            switch (action) {\n                case 'showForm':\n                    return dispatch(showForm(ownProps.data.showElement));\n                case 'createPost':\n                    return dispatch(createPost(ownProps.data.title, ownProps.data.text));\n                case 'deletePost':\n                    return dispatch(deletePost(ownProps.data));\n                case 'updatePost':\n                    return dispatch(updatePost(ownProps.data));\n                case 'showUpdateForm':\n                    return dispatch(showUpdateForm(ownProps.data));\n                case 'showPostDetail':\n                    return dispatch(showPostDetail(ownProps.data));\n            }\n        }\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Button)"]},"metadata":{},"sourceType":"module"}