{"ast":null,"code":"import { connect } from 'react-redux';\nimport { deletePost, createPost, showForm, showUpdateForm, updatePost } from '../../actions';\nimport Button from '../../components/Buttons/Button';\nimport { put, takeEvery } from 'redux-saga/effects';\nimport action from '../../index';\n\nfunction mapStateToProps(state, ownProps) {\n  console.log('Button');\n  console.log(state);\n  console.log(ownProps);\n  return {\n    className: ownProps.className,\n    showElement: ownProps.showElement,\n    action: ownProps.action,\n    formEnable: state.form,\n    result: getButtonText(state, ownProps),\n    postId: ownProps.postId ? ownProps.postId : false,\n    buttonText: ownProps.buttonText ? ownProps.buttonText : false\n  };\n}\n\nfunction getButtonText(state, ownProps) {\n  if (!ownProps.showElement) {\n    return ownProps.buttonText;\n  }\n\n  let formState = state.form.filter(v => v.showElement === ownProps.showElement).pop();\n\n  if (!formState) {\n    return ownProps.buttonText;\n  }\n\n  return formState.enabled ? \"Hide Form\" : \"Show Form\";\n}\n\nfunction* hide() {\n  yield put(showForm('form-element-1'));\n}\n\nexport function* doubleAction() {\n  yield takeEvery('CREATE_POST', hide);\n}\n/** mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well. */\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    onClick: function () {\n      let action = ownProps.action;\n\n      switch (action) {\n        case 'showForm':\n          return dispatch(showForm(ownProps.showElement));\n\n        case 'createPost':\n          return dispatch(createPost(ownProps.title, ownProps.text));\n\n        case 'deletePost':\n          return dispatch(deletePost(ownProps.postId));\n\n        case 'updatePost':\n          return dispatch(updatePost(ownProps.title, ownProps.text, ownProps.id));\n\n        case 'showUpdateForm':\n          return dispatch(showUpdateForm(ownProps.postId, ownProps.title, ownProps.text));\n      }\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","map":{"version":3,"sources":["/var/www/reactapps/testing-app-refactoring/src/containers/Buttons/Button.js"],"names":["connect","deletePost","createPost","showForm","showUpdateForm","updatePost","Button","put","takeEvery","action","mapStateToProps","state","ownProps","console","log","className","showElement","formEnable","form","result","getButtonText","postId","buttonText","formState","filter","v","pop","enabled","hide","doubleAction","mapDispatchToProps","dispatch","onClick","title","text","id"],"mappings":"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","sourcesContent":["import {connect,} from 'react-redux'\nimport {deletePost, createPost, showForm, showUpdateForm, updatePost} from '../../actions'\nimport Button from '../../components/Buttons/Button'\nimport {put, takeEvery} from 'redux-saga/effects'\nimport action from '../../index'\n\nfunction mapStateToProps(state, ownProps) {\n    console.log('Button');\n    console.log(state);\n    console.log(ownProps);\n    return {\n        className: ownProps.className,\n        showElement: ownProps.showElement,\n        action: ownProps.action,\n        formEnable: state.form,\n        result: getButtonText(state, ownProps),\n        postId: ownProps.postId ? ownProps.postId : false,\n        buttonText: ownProps.buttonText ? ownProps.buttonText : false,\n    }\n}\n\nfunction getButtonText(state, ownProps) {\n    if (!ownProps.showElement) {\n        return ownProps.buttonText\n    }\n    let formState = state.form.filter(v => v.showElement === ownProps.showElement).pop();\n    if (!formState) {\n        return ownProps.buttonText\n    }\n    return formState.enabled ? \"Hide Form\" : \"Show Form\"\n}\n\nfunction* hide() {\n    yield put(showForm('form-element-1'))\n}\n\nexport function* doubleAction() {\n    yield takeEvery('CREATE_POST', hide)\n}\n\n/** mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well. */\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        onClick: function () {\n            let action = ownProps.action;\n            switch (action) {\n                case 'showForm':\n                    return dispatch(showForm(ownProps.showElement));\n                case 'createPost':\n                    return dispatch(createPost(ownProps.title, ownProps.text));\n                case 'deletePost':\n                    return dispatch(deletePost(ownProps.postId));\n                case 'updatePost':\n                    return dispatch(updatePost(ownProps.title, ownProps.text, ownProps.id));\n                case 'showUpdateForm':\n                    return dispatch(showUpdateForm(ownProps.postId, ownProps.title, ownProps.text));\n            }\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Button)"]},"metadata":{},"sourceType":"module"}